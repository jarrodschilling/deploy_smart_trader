// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



// "npx prisma db push", then "npx prisma generate" when ready to build
// npx prisma db push -> this will update table schema if changed, then run "npx prisma generate"
model User {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  transactions  Transaction[]
  toDos         ToDo[]

}

model Account {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  type              String
  provider          String    @unique
  providerAccountId String    @unique
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Transaction {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  ticker      String
  name        String
  date        String
  buySell     String
  shares      Int
  price       Float
  shaper      String?
  tactical    String?
  closeTrade  Boolean   @default(false)
  openTrade   Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
}


model ToDo {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  ticker      String
  name        String
  date        String
  buySell     String
  shares      Int
  price       Float
  shaper      String?
  tactical    String?
  closeTrade  Boolean   @default(false)
  openTrade   Boolean   @default(false)
  updateStop  Boolean   @default(false)
  quickAction Boolean   @default(false)
  entered     Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
}